name: CI Pipeline

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  # # ─────────────────────────────────────────────
  # # Job 1: Lint every service in parallel
  # # ─────────────────────────────────────────────
  # lint:
  #   name: Lint all services
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       service:
  #         - user-service
  #         - product-catalog-service
  #         - shopping-cart-service
  #         - order-service
  #         - notification-service
  #         - payment-service
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"

  #     - name: Cache node_modules for ${{ matrix.service }}
  #       uses: actions/cache@v3
  #       with:
  #         path: services/${{ matrix.service }}/node_modules
  #         key: node-modules-${{ matrix.service }}-${{ runner.os }}-${{ hashFiles(format('services/{0}/package-lock.json', matrix.service)) }}
  #         restore-keys: |
  #           node-modules-${{ matrix.service }}-${{ runner.os }}-

  #     - name: Install dependencies for ${{ matrix.service }}
  #       working-directory: ./services/${{ matrix.service }}
  #       run: |
  #         npm ci

  #     - name: Run linter for ${{ matrix.service }}
  #       working-directory: ./services/${{ matrix.service }}
  #       run: |
  #         npm run lint

  # ─────────────────────────────────────────────
  # Job 2: Build Compose stack and run E2E tests
  # ─────────────────────────────────────────────
  # e2e-test:
  #   name: Build Docker Compose & Run E2E Tests
  #   runs-on: ubuntu-latest
  #   # needs: lint
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Compose
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y docker-compose

  #     - name: Build and start all services
  #       run: |
  #         docker-compose -f docker-compose.yml up -d --build

  #     - name: Wait for services to be healthy
  #       run: |
  #         echo "🕵️‍♂️  Polling container health statuses…"
  #         sleep 5

  #         TIMEOUT=300
  #         INTERVAL=5
  #         ELAPSED=0

  #         SERVICES=(
  #           "postgres"
  #           "rabbitmq"
  #           "elasticsearch"
  #           "user-service"
  #           "product-catalog-service"
  #           "shopping-cart-service"
  #           "order-service"
  #           "notification-service"
  #           "payment-service"
  #           "nginx"
  #           "kibana"
  #         )

  #         while true; do
  #           ALL_HEALTHY=true

  #           for SVC in "${SERVICES[@]}"; do
  #             CID=$(docker-compose -f docker-compose.yml ps -q "$SVC")

  #             if [ -z "$CID" ]; then
  #               echo "✖ $SVC: container not found yet"
  #               ALL_HEALTHY=false
  #             else
  #               STATUS=$(docker inspect -f '{{ .State.Health.Status }}' "$CID" 2>/dev/null || echo "no-healthcheck")

  #               if [ "$STATUS" != "healthy" ]; then
  #                 echo "✖ $SVC: $STATUS"
  #                 ALL_HEALTHY=false
  #               else
  e2e-testing:
    name: E2E Test all services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - user-service
          - product-catalog-service
          - shopping-cart-service
          - order-service
          - notification-service
          - payment-service
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache node_modules for ${{ matrix.service }}
        uses: actions/cache@v3
        with:
          path: services/${{ matrix.service }}/node_modules
          key: node-modules-${{ matrix.service }}-${{ runner.os }}-${{ hashFiles(format('services/{0}/package-lock.json', matrix.service)) }}
          restore-keys: |
            node-modules-${{ matrix.service }}-${{ runner.os }}-

      - name: Install dependencies for ${{ matrix.service }}
        working-directory: ./services/${{ matrix.service }}
        run: |
          npm ci

      - name: Generate Prisma client for ${{ matrix.service }}
        working-directory: ./services/${{ matrix.service }}
        run: |
          npx prisma generate --schema=./prisma/schema.prisma

      - name: Run E2E test for ${{ matrix.service }}
        working-directory: ./services/${{ matrix.service }}
        run: |
          npm run test:e2e
