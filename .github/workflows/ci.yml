name: CI Pipeline

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  # lint:
  #   name: Lint all services
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       service:
  #         - user-service
  #         - product-catalog-service
  #         - shopping-cart-service
  #         - order-service
  #         - notification-service
  #         - payment-service
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"

  #     - name: Cache node_modules for ${{ matrix.service }}
  #       uses: actions/cache@v3
  #       with:
  #         path: services/${{ matrix.service }}/node_modules
  #         key: node-modules-${{ matrix.service }}-${{ runner.os }}-${{ hashFiles(format('services/{0}/package-lock.json', matrix.service)) }}
  #         restore-keys: |
  #           node-modules-${{ matrix.service }}-${{ runner.os }}-

  #     - name: Install dependencies for ${{ matrix.service }}
  #       working-directory: ./services/${{ matrix.service }}
  #       run: |
  #         npm ci

  #     - name: Run linter for ${{ matrix.service }}
  #       working-directory: ./services/${{ matrix.service }}
  #       run: |
  #         npm run lint

  build-docker-compose:
    name: Build Docker Compose & Wait for Health
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env files from secrets
        run: |
          cat <<EOF > services/user-service/.env
          USER_SERVICE_DATABASE_URL=${{ secrets.USER_SERVICE_DATABASE_URL }}
          AUTH_SECRET=${{ secrets.AUTH_SECRET }}
          PORT=3001
          ELASTICSEARCH_URL=${{ secrets.ELASTICSEARCH_URL }}
          EOF

          cat <<EOF > services/product-catalog-service/.env
          PRODUCT_SERVICE_DATABASE_URL=${{ secrets.PRODUCT_SERVICE_DATABASE_URL }}
          USER_SERVICE_URL="http://user-service:3001"
          PORT=3002
          ELASTICSEARCH_URL=${{ secrets.ELASTICSEARCH_URL }}
          EOF

          cat <<EOF > services/shopping-cart-service/.env
          SHOPPING_CART_DATABASE_URL=${{ secrets.SHOPPING_CART_DATABASE_URL }}
          USER_SERVICE_URL="http://user-service:3001"
          PORT=3003
          PRODUCT_SERVICE_URL="http://product-catalog-service:3002"
          ELASTICSEARCH_URL=${{ secrets.ELASTICSEARCH_URL }}
          EOF

          cat <<EOF > services/payment-service/.env
          PAYMENT_SERVICE_DATABASE_URL=${{ secrets.PAYMENT_SERVICE_DATABASE_URL }}
          USER_SERVICE_URL="http://user-service:3001"
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          PORT=3006
          ORDER_SERVICE_URL="http://order-service:3004"
          ELASTICSEARCH_URL=${{ secrets.ELASTICSEARCH_URL }}
          EOF

          cat <<EOF > services/order-service/.env
          ORDER_SERVICE_DATABASE_URL=${{ secrets.ORDER_SERVICE_DATABASE_URL }}
          RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}
          USER_SERVICE_URL="http://user-service:3001"
          PRODUCT_SERVICE_URL="http://product-catalog-service:3002"
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          PORT=3004
          ELASTICSEARCH_URL=${{ secrets.ELASTICSEARCH_URL }}
          EOF

          cat <<EOF > services/notification-service/.env
          NOTIFICATION_SERVICE_DATABASE_URL=${{ secrets.NOTIFICATION_SERVICE_DATABASE_URL }}
          RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}
          PORT=3005
          ELASTICSEARCH_URL=${{ secrets.ELASTICSEARCH_URL }}
          EOF

          cat <<EOF > elasticsearch/.env
          ELASTIC_PASSWORD=${{ secrets.ELASTIC_PASSWORD }}
          EOF

          cat <<EOF > postgres/.env
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=ecommerce_user
          EOF

          cat <<EOF > rabbitmq/.env
          RABBITMQ_DEFAULT_USER=rmqadmin
          RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}
          EOF

          cat <<EOF > kibana/.env
          ELASTICSEARCH_HOST=http://elasticsearch:9200
          ELASTICSEARCH_USERNAME=kibana_system
          ELASTICSEARCH_PASSWORD=${{ secrets.KIBANA_PASSWORD }}
          ELASTIC_PASSWORD=${{ secrets.ELASTIC_PASSWORD }}
          EOF

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start Elasticsearch
        run: |
          docker-compose -f docker-compose.yml up elasticsearch -d --build

      - name: Wait for Elasticsearch healthy
        run: |
          echo "Waiting for Elasticsearch to be healthy..."

          TIMEOUT=300  # 5 minutes max wait
          INTERVAL=5
          ELAPSED=0

          while true; do
            ELASTIC_CID=$(docker-compose -f docker-compose.yml ps -q elasticsearch)
            if [ -z "$ELASTIC_CID" ]; then
              echo "Elasticsearch container not found."
              exit 1
            fi

            STATUS=$(docker inspect -f '{{ .State.Health.Status }}' "$ELASTIC_CID" 2>/dev/null || echo "unhealthy")
            if [ "$STATUS" == "healthy" ]; then
              echo "Elasticsearch is healthy!"
              break
            else
              echo "Elasticsearch status: $STATUS"
            fi

            ELAPSED=$((ELAPSED + INTERVAL))
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "Timeout waiting for Elasticsearch to become healthy."
              docker logs "$ELASTIC_CID"
              exit 1
            fi

            sleep $INTERVAL
          done

      - name: Set kibana_system password if Elasticsearch is healthy
        run: |
          # Get Elasticsearch container ID
          ELASTIC_CID=$(docker-compose -f docker-compose.yml ps -q elasticsearch)

          # Check if container exists and is healthy
          if [ -n "$ELASTIC_CID" ]; then
            STATUS=$(docker inspect -f '{{ .State.Health.Status }}' "$ELASTIC_CID" 2>/dev/null || echo "unhealthy")

            if [ "$STATUS" == "healthy" ]; then
              echo "Elasticsearch is healthy, setting kibana_system password..."
              curl -X POST "http://localhost:9200/_security/user/kibana_system/_password" \
                -H "Content-Type: application/json" \
                -u elastic:${{ secrets.ELASTIC_PASSWORD }} \
                -d '{"password":"'"${{ secrets.KIBANA_PASSWORD }}"'"}'
            else
              echo "Elasticsearch container is not healthy (status: $STATUS). Skipping kibana_system password setup."
              exit 1
            fi
          else
            echo "Elasticsearch container not found. Skipping kibana_system password setup."
            exit 1
          fi

      - name: Build and start all services
        run: |
          docker-compose -f docker-compose.yml up -d --build

      - name: Wait for services to be healthy
        run: |
          echo "üïµÔ∏è‚Äç‚ôÇÔ∏è  Polling container health statuses‚Ä¶"
          sleep 5

          TIMEOUT=300
          INTERVAL=5
          ELAPSED=0

          SERVICES=(
            "postgres"
            "rabbitmq"
            "elasticsearch"
            "user-service"
            "product-catalog-service"
            "shopping-cart-service"
            "order-service"
            "notification-service"
            "payment-service"
            "nginx"
            "kibana"
          )

          while true; do
            ALL_HEALTHY=true

            for SVC in "${SERVICES[@]}"; do
              CID=$(docker-compose -f docker-compose.yml ps -q "$SVC")

              if [ -z "$CID" ]; then
                echo "‚úñ $SVC: container not found yet"
                ALL_HEALTHY=false
              else
                STATUS=$(docker inspect -f '{{ .State.Health.Status }}' "$CID" 2>/dev/null || echo "no-healthcheck")

                if [ "$STATUS" != "healthy" ]; then
                  echo "‚úñ $SVC: $STATUS"
                  ALL_HEALTHY=false
                else
                  echo "‚úî $SVC: $STATUS"
                fi
              fi
            done

            if $ALL_HEALTHY; then
              echo "‚úÖ All services are healthy!"
              break
            fi

            ELAPSED=$((ELAPSED+INTERVAL))
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "‚ùå Timeout waiting for services to become healthy."
              docker-compose -f docker-compose.yml ps

              echo "üìú Dumping logs for unhealthy containers:"
              for SVC in "${SERVICES[@]}"; do
                CID=$(docker-compose -f docker-compose.yml ps -q "$SVC")
                if [ -n "$CID" ]; then
                  STATUS=$(docker inspect -f '{{ .State.Health.Status }}' "$CID" 2>/dev/null || echo "no-healthcheck")
                  if [ "$STATUS" != "healthy" ]; then
                    echo "üîª Logs for $SVC:"
                    docker logs "$CID" || echo "‚ö†Ô∏è Failed to fetch logs for $SVC"
                    echo ""
                  fi
                fi
              done

              exit 1
            fi

            sleep $INTERVAL
          done

  e2e-testing:
    name: E2E Test all services
    runs-on: ubuntu-latest
    needs: build-docker-compose
    strategy:
      matrix:
        service:
          - user-service
          - product-catalog-service
          - shopping-cart-service
          - order-service
          - notification-service
          - payment-service
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache node_modules for ${{ matrix.service }}
        uses: actions/cache@v3
        with:
          path: services/${{ matrix.service }}/node_modules
          key: node-modules-${{ matrix.service }}-${{ runner.os }}-${{ hashFiles(format('services/{0}/package-lock.json', matrix.service)) }}
          restore-keys: |
            node-modules-${{ matrix.service }}-${{ runner.os }}-

      - name: Install dependencies for ${{ matrix.service }} (with retries)
        working-directory: ./services/${{ matrix.service }}
        run: |
          for i in 1 2 3; do npm ci && break || sleep 10; done

      - name: Generate Prisma client for ${{ matrix.service }}
        working-directory: ./services/${{ matrix.service }}
        run: |
          npx prisma generate --schema=./src/prisma/schema.prisma

      - name: Run E2E test for ${{ matrix.service }}
        working-directory: ./services/${{ matrix.service }}
        run: |
          npm run test:e2e
