name: CI Pipeline

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  # Job 1: Lint every service in parallel
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  lint:
    name: Lint all services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - user-service
          - product-catalog-service
          - shopping-cart-service
          - order-service
          - notification-service
          - payment-service
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache node_modules for ${{ matrix.service }}
        uses: actions/cache@v3
        with:
          # Use format() instead of '+' to build the hashFiles argument
          path: services/${{ matrix.service }}/node_modules
          key: node-modules-${{ matrix.service }}-${{ runner.os }}-${{ hashFiles(format('services/{0}/package-lock.json', matrix.service)) }}
          restore-keys: |
            node-modules-${{ matrix.service }}-${{ runner.os }}-

      - name: Install dependencies for ${{ matrix.service }}
        working-directory: ./services/${{ matrix.service }}
        run: |
          npm ci

      - name: Run linter for ${{ matrix.service }}
        working-directory: ./services/${{ matrix.service }}
        run: |
          npm run lint

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  # Job 2: Build Compose stack and run E2E tests
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  e2e-test:
    name: Build Docker Compose & Run E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and start all services
        run: |
          docker-compose -f docker-compose.yml up -d --build

      - name: Wait for services to be healthy
        run: |
          echo "üïµÔ∏è‚Äç‚ôÇÔ∏è  Starting to poll container health statuses‚Ä¶"
          # Give containers a few seconds to begin initializing
          sleep 5

          # (1) How long total we‚Äôre willing to wait (in seconds)
          TIMEOUT=300
          # (2) How often we poll (in seconds)
          INTERVAL=5
          ELAPSED=0

          # (3) List out all of the service names exactly as they appear
          #     in your `docker-compose.yml`. Upstream services first.
          SERVICES=(
            "postgres"
            "rabbitmq"
            "elasticsearch"
            "user-service"
            "product-catalog-service"
            "shopping-cart-service"
            "order-service"
            "notification-service"
            "payment-service"
            "nginx"
            "kibana"
          )

          # Poll loop
          while true; do
            ALL_HEALTHY=true

            for SVC in "${SERVICES[@]}"; do
              # (a) Get the container ID for this service
              CID=$(docker-compose -f docker-compose.yml ps -q "$SVC")

              if [ -z "$CID" ]; then
                echo "‚úñ $SVC: container not found yet"
                ALL_HEALTHY=false
              else
                # (b) Inspect its Health.Status
                STATUS=$(docker inspect -f '{{ .State.Health.Status }}' "$CID" 2>/dev/null || echo "no-healthcheck")

                if [ "$STATUS" != "healthy" ]; then
                  echo "‚úñ $SVC: $STATUS"
                  ALL_HEALTHY=false
                else
                  echo "‚úî $SVC: healthy"
                fi
              fi
            done

            if $ALL_HEALTHY; then
              echo "‚úÖ All services are healthy!"
              break
            fi

            if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
              echo "‚è∞ Timeout of ${TIMEOUT}s reached while waiting for health checks."
              echo "Current statuses (docker-compose ps):"
              docker-compose -f docker-compose.yml ps
              exit 1
            fi

            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

      - name: Install E2E dependencies
