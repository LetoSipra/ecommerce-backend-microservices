services:
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - user-service
      - product-catalog-service
      - shopping-cart-service
      - order-service
      - notification-service
      - payment-service
    networks:
      - ecommerce-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/nginx-health || exit 1"]
      start_period: 30s
      interval: 15s
      timeout: 10s
      retries: 10

  user-service:
    build: ./services/user-service
    env_file:
      - ./services/user-service/.env
    ports:
      - "3001:3001"
    networks:
      - ecommerce-net
    restart: always
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      start_period: 30s
      interval: 15s
      timeout: 10s
      retries: 10

  product-catalog-service:
    build: ./services/product-catalog-service
    env_file:
      - ./services/product-catalog-service/.env
    ports:
      - "3002:3002"
    networks:
      - ecommerce-net
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/health || exit 1"]
      start_period: 30s
      interval: 15s
      timeout: 10s
      retries: 10

  shopping-cart-service:
    build: ./services/shopping-cart-service
    env_file:
      - ./services/shopping-cart-service/.env
    ports:
      - "3003:3003"
    networks:
      - ecommerce-net
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3003/health || exit 1"]
      start_period: 30s
      interval: 15s
      timeout: 10s
      retries: 10

  order-service:
    build: ./services/order-service
    env_file:
      - ./services/order-service/.env
    ports:
      - "3004:3004"
    networks:
      - ecommerce-net
    restart: always
    depends_on:
      notification-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3004/health || exit 1"]
      start_period: 30s
      interval: 15s
      timeout: 10s
      retries: 10

  notification-service:
    build: ./services/notification-service
    env_file:
      - ./services/notification-service/.env
    ports:
      - "3005:3005"
    networks:
      - ecommerce-net
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3005/health || exit 1"]
      start_period: 30s
      interval: 15s
      timeout: 10s
      retries: 10

  payment-service:
    build: ./services/payment-service
    env_file:
      - ./services/payment-service/.env
    ports:
      - "3006:3006"
    networks:
      - ecommerce-net
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3006/health || exit 1"]
      start_period: 30s
      interval: 15s
      timeout: 10s
      retries: 10

  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=ecommerce_user
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - ecommerce-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      start_period: 30s
      interval: 15s
      timeout: 10s
      retries: 10

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=rmqadmin
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
    networks:
      - ecommerce-net
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics ping"]
      start_period: 30s
      interval: 15s
      timeout: 10s
      retries: 10

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    container_name: elasticsearch
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ecommerce-net
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f -u elastic:$$ELASTIC_PASSWORD http://localhost:9200/_cluster/health?wait_for_status=yellow || exit 1",
        ]
      start_period: 30s
      interval: 15s
      timeout: 10s
      retries: 10

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.3
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - ecommerce-net
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f -u elastic:$ELASTIC_PASSWORD http://localhost:5601/api/status || exit 1",
        ]
      start_period: 30s
      interval: 15s
      timeout: 10s
      retries: 10

networks:
  ecommerce-net:
    driver: bridge

volumes:
  pgdata:
  esdata:
  rabbitmqdata:
